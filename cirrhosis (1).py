# -*- coding: utf-8 -*-
"""cirrhosis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YN1Qjo0uMrvKvqalromlDx4zMvAj6eF-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/cirrhosis.csv')
df

df.shape

df.head()

df.tail()

df.isna().sum()

df['Drug'].unique()

df.dropna(subset=['Drug'],inplace=True)
df

df.isna().sum()

df.dtypes

df.fillna(df['Cholesterol'].mean(),inplace=True)
df.fillna(df['Tryglicerides'].mean(),inplace=True)

df.isna().sum()

df.dtypes

sns.countplot(x='Drug',data=df,color='red')

sns.countplot(x='Sex',data=df,color='green')

sns.countplot(x='Ascites',data=df,color='orange')

sns.countplot(x='Hepatomegaly',data=df,color='blue')

sns.countplot(x='Spiders',data=df,color='brown')

sns.countplot(x='Edema',data=df,color='Black')

unique_drug=df['Status'].unique()
count_drug=df['Status'].value_counts()
plt.pie(count_drug,labels=unique_drug,autopct='%1.1f%%')
plt.legend(loc='upper right')

df.dtypes

df.columns



df1=pd.get_dummies(df[['Drug','Sex','Ascites','Hepatomegaly','Spiders','Edema']],dtype=int,drop_first=True)
df1

dfe=pd.concat([df,df1],axis=1)
dfe.dtypes

dfe.drop(['ID','Drug','Sex','Ascites','Hepatomegaly','Spiders','Edema'],axis=1,inplace=True)
dfe

dfe.dtypes

y=dfe['Status'].values
y

x=dfe.drop(['Status'],axis=1).values
x

# Train Test Split

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=42,random_state=42)
x_train

x_test

y_train

y_test

# Normalization

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

model_1=KNeighborsClassifier(n_neighbors=7)
model_2=BernoulliNB()
model_3=SVC()
model_4=DecisionTreeClassifier()
model_5=RandomForestClassifier()
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

lst=[model_1,model_2,model_3,model_4,model_5]

for i in lst:
  print(i)
  i.fit(x_train,y_train)
  y_pred=i.predict(x_test)
  print("Predicted Values:")
  print(y_pred)
  print("Confusion Matrix:")
  print(confusion_matrix(y_test,y_pred))
  print("Accuracy Score:")
  print(accuracy_score(y_test,y_pred))
  print("Other Performance Evaluations:")
  print(classification_report(y_test,y_pred))